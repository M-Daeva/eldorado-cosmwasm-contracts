{
  "contract_name": "eldorado-aggregator-osmosis",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Called by user to: 1) swap token on Osmosis -> native Osmo 2) send native Osmo to vault",
        "type": "object",
        "required": [
          "swap_in"
        ],
        "properties": {
          "swap_in": {
            "type": "object",
            "required": [
              "vault_address"
            ],
            "properties": {
              "vault_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called by vault to: 1) swap native Osmo -> token on Osmosis 2) send token on Osmosis to user address on Osmosis or other Cosmos network",
        "type": "object",
        "required": [
          "swap_out"
        ],
        "properties": {
          "swap_out": {
            "type": "object",
            "required": [
              "denom_out",
              "user_address"
            ],
            "properties": {
              "channel_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "denom_out": {
                "type": "string"
              },
              "user_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called by admin",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "ibc_timeout_in_mins": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "query_config"
        ],
        "properties": {
          "query_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "string",
    "enum": []
  },
  "sudo": null,
  "responses": {
    "query_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "admin",
        "ibc_timeout"
      ],
      "properties": {
        "admin": {
          "$ref": "#/definitions/Addr"
        },
        "ibc_timeout": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    }
  }
}
